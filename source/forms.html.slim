---
body_class: "is-forms"
---

h1 Forms

section.mtl
  h2.mbm Text Inputs

  .b-input.por
    input id="email" type="text" placeholder="Email Address"
    label.poa for="email"
      small.b-font-family-bold.b-letter-spacing-label
        | Email Address
  .b-input.por
    input id="password" type="password" placeholder="Password"
    label.poa for="password"
      small.b-font-family-bold.b-letter-spacing-label
        | Password
  .b-input.por
    textarea id="description" placeholder="Add your description"
    label.poa for="description"
      small.b-font-family-bold.b-letter-spacing-label
        | Description

  h4.mtl Default Styles (Web)

  p.mts.mbxs
    | Form fields are styled over a pre-defined set of global rules affecting all text inputs, including text areas:

  = code('sass') do
    |
      \#{$all-text-inputs}
        @include transition(padding .25s ease)
        background: $white
        border: none
        color: lighten($black, 60%)
        font-family: $font-family-book
        font-size: $font-size-large
        line-height: $line-height-text-input
        margin-top: 2px
        min-width: rem($text-input-min-width)
        padding: rem($text-input-vertical-padding) rem($text-input-horizontal-padding)

  p.mts.mbxs
    | The UI/UX dynamics between the input's placeholder and its label are based on the <code>:focus</code> pseudo-class paired up with toggling of a state-based class (<code>.is-dirty</code>) applied to the input element via javascript if presence of text is detected.

  = code('sass', :start_line => 12) do
    |
      @include placeholder
        @include transition(opacity .25s ease)
        line-height: initial

      &:focus,
      &.is-dirty
        padding-bottom: rem($b-text-input-focus-bottom-padding)
        padding-top: rem($b-text-input-focus-top-padding)

        @include placeholder
          opacity: 0

      &:focus
        color: $marine
        outline: none

      // Adjacent input label
      + label
        @include transition(top .25s ease, opacity .25s ease)
        color: lighten($black, 90%)
        left: rem(20)
        opacity: 0
        top: rem(15)


      &:focus + label,
      &.is-dirty + label
        opacity: 1
        top: rem(10)

      &:focus + label
        color: $marine

  p.mtm.mbxs
    | As for the js-based state class toggling functionality:

  = code('coffeescript') do
    |
      _.input.on 'blur', (e) ->
        console.log $.trim($(this).val()).length
        if $.trim($(this).val()).length > 0
          $(this).addClass('is-dirty')
        else
          $(this).removeClass('is-dirty')

  p.mtm.mbxs
    | Both <code>input</code> and <code>label</code> elements should be wrapped in a <code>.b-input</code> container.
    br
    | Note that the order of elements is important here:

  = code('slim') do
    |
      .b-input.por
        input id="email" type="text" placeholder="Email Address"
        label.poa for="email"
          small.b-font-family-bold.b-letter-spacing-label
            | Email Address
