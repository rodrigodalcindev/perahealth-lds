---
body_class: "is-forms"
---

h1 Forms

section.mtl
  .g-row
    .g-col-4
      h2.mbm  Text Inputs

      h4.mbm Foundation Styles (Web)

      .b-input.is-text.por
        input id="email" type="text" placeholder="Email Address"
        label.poa for="email"
          small
            | Email Address

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Form fields are styled over a pre-defined set of global rules affecting all text inputs, including text areas:

  .g-row
    = code('sass') do
      |
        \#{$all-text-inputs}
          @include transition(padding .25s ease)
          background: $b-color-white
          border: none
          color: lighten($b-color-violet-slate, 3.5%)
          font-weight: $b-font-weight-book
          font-size: $b-font-size-input
          line-height: $b-line-height-text-input
          margin-top: rem(2)
          min-width: $b-text-input-min-width
          padding: $b-space
          width: 100%

  .g-row
    .g-col-7
      p.mts.mbxs
        | The UI/UX dynamics between the input's placeholder and its label are based on the <code>:focus</code> pseudo-class paired up with toggling of a state-based class (<code>.is-dirty</code>) applied to the input element via javascript if presence of text is detected.

  .g-row
    = code('sass', :start_line => 11) do
      |
        \#{$all-text-inputs}
          /*(...)*/
          @include placeholder
            @include transition(opacity .25s ease)
            line-height: initial

          &:focus,
          &.is-dirty
            padding-bottom: ($b-space - $b-space-s)
            padding-top: ($b-space + $b-space-s)

            @include placeholder
              opacity: 0

          &:focus
            outline: none

          + label
            @include transition(top .25s ease, opacity .25s ease)
            background: $b-color-white
            color: lighten($b-color-violet-slate, 3.5%)
            height: ($b-space + $b-space-s)
            left: 0
            line-height: $b-line-height-input-label
            min-width: $b-text-input-min-width
            opacity: 0
            padding-left: $b-space
            pointer-events: none
            top: ($b-space-s + $b-space-s)

          &:focus + label,
          &.is-dirty + label
            opacity: 1
            top: rem(2)

          &:focus + label
            color: $b-color-turquoise

  .g-row
    .g-col-7
      p.mtm.mbxs
        | As for the js-based state class toggling functionalities:

  .g-row
    = code('coffeescript') do
      |
        _.input.on 'focus', (e) ->
          $(this).parent().addClass('has-focus')

        _.input.on 'blur', (e) ->
          $(this).parent().removeClass('has-focus')

          if $.trim($(this).val()).length > 0
            $(this).addClass('is-dirty')
          else
            $(this).removeClass('is-dirty')

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Markup-wise, both <code>input</code> and <code>label</code> elements should be wrapped in a <code>.b-input.is-text</code> container for simplified targetting with javascript. Note that the order of elements is important here:

  .g-row
    = code('slim') do
      |
        .b-input.is-text.por
          input id="email" type="text" placeholder="Email Address"
          label.poa for="email"
            small
              | Email Address

  .g-row
    .g-col-7
      p.mtm.mbl
        | Note: Generally, <code>.b-input</code> wrappers' <code>overflow</code> should be set to <code>hidden</code>.

section.mtl
  .g-row
    .g-col-5
      h2.mbm  Text Area

      h4.mbm Overridden Styles (Web)

      .b-input.is-text.por
        textarea id="description" placeholder="Add your description"
        label.poa for="description"
          small
            | Description

  .g-row
    .g-col-7
      p.mts.mbxs
        | Text area elements inherit from the same global styles and UI/UX dynamics affecting text inputs, with a couple of overrides:

  .g-row
    = code('sass') do
      |
        textarea
          line-height: $b-line-height-text-area
          min-height: $b-text-area-min-height

section.mtl
  .g-row
    .g-col-4
      h2.mbm  Custom Select

      h4.mbm Plugin-Based Styles (Web)

      .b-input.is-select.por
        i.fa.fa-angle-down.poa
        select
          option value="" disabled="" selected=""
            | - Please Select -
          option value="Sales"
            | Sales
          option value="Employment"
            | Employment
          option value="Technical"
            | Technical
          option value="Billing"
            | Billing
          option value="Other"
            | Other

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Custom selects are achieve using the <a href="https://github.com/adamcoulombe/jquery.customSelect" target="_blank">customSelect.js</a> plugin. The <code>.customSelect</code> wrapper generated by the plugin inherits the same style rules as <code>\#{$all-text-inputs}</code>. However, some style overrides are necessary to adapt the markup generated by the plugin:

  .g-row
    = code('sass', :start_line => 119) do
      |
        select.hasCustomSelect
          cursor: pointer
          z-index: $stratum-high

        .customSelect
          &.customSelectDisabledOption
            .customSelectInner
              opacity: .54

        .customSelectInner
          width: 100% !important

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Basic markup goes as follow (notice the <code>.is-select</code> state class applied to the <code>.b-input</code> wrapper:

  .g-row
    = code('slim') do
      |
        .b-input.is-select.por
          i.fa.fa-angle-down.poa
          select
            option value="" disabled="" selected=""
              | - Please Select -
            option value="1"
              | Option #1

  .g-row
    .g-col-7
      p.mtm.mbxs
        | As for the FontAwesome caret styles:

  .g-row
    = code('sass', :start_line => 70) do
      |
        .b-input
          /*(...)*/
          &.is-select
            .fa
              color: $canary-yellow
              height: 100%
              line-height: 3.75
              right: $b-space

section.mtl
  .g-row
    .g-col-4
      h2.mbm Form Validation

      h4.mbm Inline Validation

      .b-input.is-text.has-errors.por
        input id="email" type="text" placeholder="Email Address"
        label.poa for="email"
          small
            | Email Address
        span.b-input-error.poa
          small
            | This field is invalid

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Inline validation messages should be wrapped in a <code>.b-input-error</code> element placed on the same level as the <code>input</code> field:

  .g-row
    = code('slim') do
      |
        .b-input.is-text.por
          input id="email" type="text" placeholder="Email Address"
          label.poa for="email"
            small
              | Email Address
          span.b-input-error.poa
            | This field is invalid

  .g-row
    .g-col-7
      p.mtm.mbxs
        | The UI/UX dynamics affecting the <code>.b-input-error</code> element are based on toggling of a state-based class (<code>.has-errors</code>) applied to the invalid input wrapper:

  .g-row
    = code('sass') do
      |
        .b-input-error
          @include transition(transform .25s ease, opacity .15s ease)
          @include transform(translateY(100%))
          bottom: 0
          color: $b-color-red
          left: 0
          line-height: 1
          opacity: 0
          padding-bottom: rem(2)
          padding-left: $b-space
          pointer-events: none
          min-width: $b-text-input-min-width

          .b-input.has-errors &
            @include transform(translateY(0))
            opacity: 1

  .g-row
    .g-col-7
      p.mtm.mbxs
        | The inline validation should also be temporarily hidden when its sibling input is focused:

  .g-row
    = code('sass', :start_line => 49) do
      |
        \#{$all-text-inputs}
          /*(...)*/
          &:focus ~ .b-input-error
            @include transform(translateY(100%))
            opacity: 0

  .g-row
    .g-col-7
      p.mtm.mbxs
        | The visual hint (red line) applied to <code>.has-errors</code> input wrappers should be styled as follows:

  .g-row
    = code('sass', :start_line => 68) do
      |
        .b-input
          &.has-errors
            &:after
              @include transition(transform .2s ease)
              @include transform-origin(bottom)
              @include transform(scaleY(0))
              background: $b-color-red
              bottom: 0
              content: ''
              display: inline-block
              height: 100%
              position: absolute
              right: 0
              width: 2px

            &:not(.has-focus)
              \#{$all-text-inputs}
                &.is-dirty
                  padding-bottom: ($b-space - $b-space-xs)
                  padding-top: ($b-space + $b-space-xs)

              &:after
                @include transform(scaleY(1))