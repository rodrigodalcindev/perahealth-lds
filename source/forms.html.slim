---
body_class: "is-forms"
---

h1 Forms

section.mtl
  h2.mbm Text Inputs

  .b-input.is-text.por
    input id="email" type="text" placeholder="Email Address"
    label.poa for="email"
      small.b-font-family-bold.b-letter-spacing-label
        | Email Address

  h4.mtl Default Styles (Web)

  .g-row
    .g-col-7
      p.mts.mbxs
        | Form fields are styled over a pre-defined set of global rules affecting all text inputs, including text areas:

  = code('sass') do
    |
      \#{$all-text-inputs}
        @include transition(padding .25s ease)
        background: $white
        border: none
        color: lighten($black, 60%)
        font-family: $font-family-book
        font-size: $font-size-large
        line-height: $line-height-text-input
        margin-top: 2px
        min-width: rem($text-input-min-width)
        padding: rem($text-input-vertical-padding) rem($text-input-horizontal-padding)

  .g-row
    .g-col-7
      p.mts.mbxs
        | The UI/UX dynamics between the input's placeholder and its label are based on the <code>:focus</code> pseudo-class paired up with toggling of a state-based class (<code>.is-dirty</code>) applied to the input element via javascript if presence of text is detected.

  = code('sass', :start_line => 11) do
    |
      \#{$all-text-inputs}
        /*(...)*/
        @include placeholder
          @include transition(opacity .25s ease)
          line-height: initial

        &:focus,
        &.is-dirty
          padding-bottom: rem($b-text-input-focus-bottom-padding)
          padding-top: rem($b-text-input-focus-top-padding)

          @include placeholder
            opacity: 0

        &:focus
          color: $marine
          outline: none

        + label
          @include transition(top .25s ease, opacity .25s ease)
          background: $white
          color: lighten($black, 90%)
          height: rem($text-input-focus-top-padding)
          left: 0
          line-height: $line-height-input-label
          width: rem($text-input-min-width)
          opacity: 0
          padding-left: rem($text-input-horizontal-padding)
          top: rem(15)

        &:focus + label,
        &.is-dirty + label
          opacity: 1
          top: rem(10)

        &:focus + label
          color: $marine

  .g-row
    .g-col-7
      p.mtm.mbxs
        | As for the js-based state class toggling functionality:

  = code('coffeescript') do
    |
      _.input.on 'blur', (e) ->
        if $.trim($(this).val()).length > 0
          $(this).addClass('is-dirty')
        else
          $(this).removeClass('is-dirty')

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Markup-wise, both <code>input</code> and <code>label</code> elements should be wrapped in a <code>.b-input.is-text</code> container for simplified targetting with javascript. Note that the order of elements is important here:

  = code('slim') do
    |
      .b-input.is-text.por
        input id="email" type="text" placeholder="Email Address"
        label.poa for="email"
          small.b-font-family-bold.b-letter-spacing-label
            | Email Address

section.mtl
  h2.mbm Text Area

  .b-input.is-text.por
      textarea id="description" placeholder="Add your description"
      label.poa for="description"
        small.b-font-family-bold.b-letter-spacing-label
          | Description

  h4.mtl Overridden Styles (Web)

  .g-row
    .g-col-7
      p.mts.mbxs
        | Text area elements inherit from the same global styles and UI/UX dynamics affecting text inputs, with a couple of overrides:

  = code('sass') do
    |
      textarea
        line-height: $line-height-text-area
        min-height: rem($text-area-min-height)

section.mtl
  h2.mbm Text Input Controls

  .g-row
    .g-col-7
      p.mbxs
        | Text input controls are interactive elements represented by icons that allow for modifying the field's content or the way it's being displayed. For web, the iconography consists of one or more SVG elements wrapped in a <code>figure</code> element identified with a <code>.b-input-control</code> class. Notice the <code>.has-controls</code> class applied to the <code>.b-input</code> wrapper:

  = code('slim') do
    |
      .b-input.is-text.has-controls.fl.por
        input
        ...
        figure.b-input-control.poa
          svg

  .g-row
    .g-col-7
      p.mtm.mbxs
        | An input with a control component inherits from the same global styles and UI/UX dynamics affecting text inputs, with a set of overriddes based on the <code>.has-controls</code>:

  = code('sass') do
    |
      .b-input
        &.has-controls
          input
            padding-right: rem(90)

          .b-input-control
            @include transform(translateY(-50%))
            cursor: pointer
            height: rem($b-text-input-control-height)
            right: rem($b-text-input-horizontal-padding)
            top: 50%
            width: rem($b-text-input-control-width)

            svg
              height: 100%
              width: 100%

  h4.mtl.mbm Password Masking

  .b-input.is-text.has-controls.fl.por
    input id="password" type="password" placeholder="Password"
    label.poa for="password"
      small.b-font-family-bold.b-letter-spacing-label
        | Password
    figure.b-input-control.is-masking.poa
      svg.is-active
        use xlink:href="#eyeball-active"
      svg.is-inactive
        use xlink:href="#eyeball-inactive"

  .clear

  .g-row
    .g-col-7
      p.mtm.mbxs
        | UX for password masking is achieved by toggling the input's type attribute between <code>password</code> and <code>text</code> with js.

  = code('coffeescript') do
    |
      _.textInputControl.on 'click', (e) ->
        if $(this).hasClass('is-masking')
          inputType = $(this).siblings('input').attr('type')

          if inputType == "password"
            $(this).siblings('input').attr('type','text')
          else if inputType == "text"
            $(this).siblings('input').attr('type','password')

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Hiding / displaying of the corresponding masking iconography is done based on the input's type attribute.
        br
        | The <code>figure.b-input-control</code> element should be identified with a <code>.is-masking</code> class and contain one icon for each field state (masked/unsmasked).

  = code('sass') do
    |
      .b-input
        &.has-controls
          input
            &[type="password"] ~ .b-input-control.is-masking
              svg.is-active
                display: none

            &[type="text"] ~ .b-input-control.is-masking
              svg.is-inactive
                display: none

  br

  = code('slim') do
    |
      figure.b-input-control.is-masking.poa
        svg.is-active
          use xlink:href="#eyeball-active"
        svg.is-inactive
          use xlink:href="#eyeball-inactive"