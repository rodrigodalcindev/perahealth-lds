---
body_class: "is-forms"
---

h1 Forms

section.mtl
  h2.mbm Text Inputs

  .b-input.is-text.por
    input id="email" type="text" placeholder="Email Address"
    label.poa for="email"
      small.b-font-family-bold.b-letter-spacing-label
        | Email Address

  h4.mtl Foundation Styles (Web)

  .g-row
    .g-col-7
      p.mts.mbxs
        | Form fields are styled over a pre-defined set of global rules affecting all text inputs, including text areas:

  .g-row
    = code('sass') do
      |
        \#{$all-text-inputs}
          @include transition(padding .25s ease)
          background: $white
          border: none
          color: lighten($black, 60%)
          font-family: $font-family-book
          font-size: $font-size-large
          line-height: $line-height-text-input
          margin-top: 2px
          min-width: $text-input-min-width
          padding: ($space + $space-xs) $space

  .g-row
    .g-col-7
      p.mts.mbxs
        | The UI/UX dynamics between the input's placeholder and its label are based on the <code>:focus</code> pseudo-class paired up with toggling of a state-based class (<code>.is-dirty</code>) applied to the input element via javascript if presence of text is detected.

  .g-row
    = code('sass', :start_line => 11) do
      |
        \#{$all-text-inputs}
          /*(...)*/
          @include placeholder
            @include transition(opacity .25s ease)
            line-height: initial

          &:focus,
          &.is-dirty
            padding-bottom: ($space - $space-xs)
            padding-top: ($space-l - $space-xs)

            @include placeholder
              opacity: 0

          &:focus
            color: $marine
            outline: none

          + label
            @include transition(top .25s ease, opacity .25s ease)
            background: $white
            color: lighten($black, 90%)
            height: ($space-l - $space-xs)
            left: 0
            line-height: $line-height-input-label
            min-width: $text-input-min-width
            opacity: 0
            padding-left: $space
            top: ($space-s + $space-xs)

          &:focus + label,
          &.is-dirty + label
            opacity: 1
            top: rem(2)

          &:focus + label
            color: $marine

  .g-row
    .g-col-7
      p.mtm.mbxs
        | As for the js-based state class toggling functionality:

  .g-row
    = code('coffeescript') do
      |
        _.input.on 'blur', (e) ->
          if $.trim($(this).val()).length > 0
            $(this).addClass('is-dirty')
          else
            $(this).removeClass('is-dirty')

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Markup-wise, both <code>input</code> and <code>label</code> elements should be wrapped in a <code>.b-input.is-text</code> container for simplified targetting with javascript. Note that the order of elements is important here:

  .g-row
    = code('slim') do
      |
        .b-input.is-text.por
          input id="email" type="text" placeholder="Email Address"
          label.poa for="email"
            small.b-font-family-bold.b-letter-spacing-label
              | Email Address

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Note: Generally, <code>.b-input</code> wrappers' <code>overflow</code> should be set to <code>hidden</code>.

section.mtl
  h2.mbm Text Area

  .b-input.is-text.por
      textarea id="description" placeholder="Add your description"
      label.poa for="description"
        small.b-font-family-bold.b-letter-spacing-label
          | Description

  h4.mtl Overridden Styles (Web)

  .g-row
    .g-col-7
      p.mts.mbxs
        | Text area elements inherit from the same global styles and UI/UX dynamics affecting text inputs, with a couple of overrides:

  .g-row
    = code('sass') do
      |
        textarea
          line-height: $line-height-text-area
          min-height: $text-area-min-height

section.mtl
  h2.mbm Text Input Controls

  .g-row
    .g-col-7
      p.mbxs
        | Text input controls are interactive elements represented by icons that allow for modifying the field's content or the way it's being displayed. For web, the iconography consists of one or more SVG elements wrapped in a <code>figure</code> element identified with a <code>.b-input-control</code> class. Notice the <code>.has-controls</code> class applied to the <code>.b-input</code> wrapper:

  .g-row
    = code('slim') do
      |
        .b-input.is-text.has-controls.fl.por
          input
          ...
          figure.b-input-control.poa
            svg

  .g-row
    .g-col-7
      p.mtm.mbxs
        | An input with a control component inherits from the same global styles and UI/UX dynamics affecting text inputs, with a set of overriddes based on the <code>.has-controls</code>:

  .g-row
    = code('sass') do
      |
        .b-input
          overflow: hidden

          &.has-controls
            input
              padding-right: rem(90)

        .b-input-control
          @include transform(translateY(-50%))
          cursor: pointer
          height: $text-input-control-height
          right: $space
          top: 50%
          width: $text-input-control-width

          svg
            height: 100%
            width: 100%

  h4.mtl.mbm Password Masking

  .b-input.is-text.has-controls.fl.por
    input id="password" type="password" placeholder="Password"
    label.poa for="password"
      small.b-font-family-bold.b-letter-spacing-label
        | Password
    figure.b-input-control.is-masking.poa
      svg.is-active
        use xlink:href="#eyeball-active"
      svg.is-inactive
        use xlink:href="#eyeball-inactive"

  .clear

  .g-row
    .g-col-7
      p.mtm.mbxs
        | UX for password masking is achieved by toggling the input's type attribute between <code>password</code> and <code>text</code> with js.

  .g-row
    = code('coffeescript') do
      |
        _.textInputControl.on 'click', (e) ->
          if $(this).hasClass('is-masking')
            inputType = $(this).siblings('input').attr('type')

            if inputType == "password"
              $(this).siblings('input').attr('type','text')
            else if inputType == "text"
              $(this).siblings('input').attr('type','password')

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Hiding / displaying of the corresponding masking iconography is done based on the input's type attribute.
        br
        | The <code>figure.b-input-control</code> element should be identified with a <code>.is-masking</code> class and contain one icon for each field state (masked/unmasked).

  .g-row
    = code('sass') do
      |
        .b-input
          overflow: hidden

          &.has-controls
            input
              &[type="password"] ~ .b-input-control.is-masking
                svg.is-active
                  display: none

              &[type="text"] ~ .b-input-control.is-masking
                svg.is-inactive
                  display: none
  .g-row
    = code('slim') do
      |
        figure.b-input-control.is-masking.poa
          svg.is-active
            use xlink:href="#eyeball-active"
          svg.is-inactive
            use xlink:href="#eyeball-inactive"

section.mtl
  h2.mbm Form Validation

  h4.mbm Inline Validation

  .b-input.is-text.has-errors.por
    input id="email" type="text" placeholder="Email Address"
    label.poa for="email"
      small.b-font-family-bold.b-letter-spacing-label
        | Email Address
    span.b-input-error.b-font-size-small.poa
      | This field is invalid

  .g-row
    .g-col-7
      p.mtm.mbxs
        | Inline validation messages should be wrapped in a <code>.b-input-error</code> element placed on the same level as the <code>input</code> field:
  .g-row
    = code('slim') do
      |
        .b-input.is-text.por
          input id="email" type="text" placeholder="Email Address"
          label.poa for="email"
            small.b-font-family-bold.b-letter-spacing-label
              | Email Address
          span.b-input-error.b-font-size-small.poa
            | This field is invalid

  .g-row
    .g-col-7
      p.mtm.mbxs
        | The UI/UX dynamics affecting the <code>.b-input-error</code> element are based on toggling of a state-based class (<code>.has-errors</code>) applied to the invalid input wrapper:

  .g-row
    = code('sass') do
      |
        .b-input-error
          @include transition(transform .25s ease, opacity .15s ease)
          @include transform(translateY(100%))
          bottom: 0
          color: $azalea
          left: 0
          opacity: 0
          padding-left: $space
          pointer-events: none
          min-width: $text-input-min-width

          .b-input.has-errors &
            @include transform(translateY(0))
            opacity: 1

  .g-row
    .g-col-7
      p.mtm.mbxs
        | The inline validation should also be temporarily hidden when its sibling input is focused:

  .g-row
    = code('sass', :start_line => 50) do
      |
        \#{$all-text-inputs}
          /*(...)*/
          &:focus ~ .b-input-error
            @include transform(translateY(100%))
            opacity: 0